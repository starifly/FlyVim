snippet Inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet inc "#include <> (Inc)"
#include <${1:.h}>
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	name = re.sub(r'([A-Z])([a-z])', r'\1_\2', name)
	snip.rv = ('%s' % (name,)).upper()
else:
    snip.rv = snip.c`}
#define $1

${0}

#endif /* end of include guard: $1 */
endsnippet

snippet foi "for int loop (foi)"
for (${4:int} ${2:i} = 0; $2 < ${1:n}; $2++)
	${0:/* code */}
endsnippet

snippet for "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:n}; $2++) {
	${0:/* code */}
}
endsnippet

snippet printf
printf("${1:%d}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet scanf
scanf("${1:%d}"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet readint
int readInt()
{
  int c, t = 0;
  while (c = getchar(), c < '0' || c > '9');
  while ('0' <= c && c <= '9') {
    t = t * 10 + c - '0';
    c = getchar();
  }
  return t;
}
endsnippet

snippet ri
int ri()
{
  int x;
  scanf("%d", &x);
  return x;
}
endsnippet

snippet rd
double rd()
{
  double x;
  scanf("%lf", &x);
  return x;
}
endsnippet

snippet edge
struct Edge { int v; Edge* next; } $0;
endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet omp "#pragma omp"
#pragma omp
endsnippet

snippet REP
#define REP(i, n) FOR(i, 0, n)
endsnippet

snippet REP1
#define REP1(i, n) FOR(i, 1, n+1)
endsnippet

snippet FOR
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
endsnippet

snippet ROF
#define ROF(i, a, b) for (int i = (b); --i >= (a); )
endsnippet

snippet mainu
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <unistd.h>

int main()
{
	$0
}
endsnippet

# vim:ft=snippets:
