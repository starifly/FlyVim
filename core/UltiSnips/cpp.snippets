extends c

snippet bend "$1.begin(), $1.end()"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet pair
typedef pair<${1:int}, ${2:int}> `!p snip.rv = 'p'+t[1][0]+t[2][0]`
endsnippet

snippet foit "for int loop (foi)"
for (${1:vector}<${2:int}>::iterator ${3:i} = ${4:a}.begin(); $3 != $4.end(); ++$3) {
  ${0:/* code */}
}
endsnippet

snippet mainw "main()"
#define __STDC_FORMAT_MACROS
#include <inttypes.h>
#include <algorithm>
#include <cstdio>
#include <functional>
#include <map>
#include <set>
#include <utility>
#include <vector>
using namespace std;

typedef int64_t ll;
#define EACH(i, a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); ++i)
#define REP(i, n) for (int i = 0; i < (n); i++)
#define REP1(i, n) for (int i = 1; i <= (n); i++)
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define ROF(i, a, b) for (int i = (b); --i >= (a); )
#define pb push_back
#define mp make_pair
#define fi first
#define se second

typedef vector<int> VI;
typedef pair<int, int> PII;

int ri()
{
  int x;
  scanf("%d", &x);
  return x;
}

int main()
{
  $0
}
endsnippet

snippet main
int main()
{
  $0
}
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
  ${1/(\w+).*/$1/}(${2:arguments});
  virtual ~${1/(\w+).*/$1/} ();
protected:
  ${0:/* data */}
};
endsnippet

snippet map "std::map (map)"
map<${1:long}, ${2:long}> $0;
endsnippet

snippet vector "std::vector (v)"
vector<${1:long}> $0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet fenwick
void add(long a[], long n, long x, long delta)
{
  for (; x < n; x |= x+1)
    fenwick[x] += delta;
}

void getSum(long a[], long x)
{
  long sum = 0;
  for (; x; x &= x-1)
    sum += fenwick[x-1];
  return sum;
}
endsnippet

snippet hld
long chain[N], dep[N], dfn[N], par[N], tick;

long dfs(long u, long p)
{
  long size = 1, maxs = 0;
  par[u] = p;
  chain[u] = -1;
  for (long v: adj[u])
    if (v != p) {
      dep[v] = dep[u]+1;
      long s = dfs(v, u);
      size += s;
      if (s > maxs)
        maxs = s, chain[u] = v;
    }
  return size;
}

void hld(long u, long p, long top)
{
  dfn[u] = tick++;
  if (chain[u] >= 0) {
    hld(chain[u], u, top);
    for (long v: adj[u])
      if (v != p && v != chain[u])
        hld(v, u, v);
  }
  chain[u] = top;
}

long path(long u, long v)
{
  long r = 0;
  while (chain[u] != chain[v]) {
    if (dep[chain[u]] > dep[chain[v]]) {
      u = par[chain[u]];
    } else {
      v = par[chain[v]];
    }
  }
  if (dep[u] > dep[v])
    ;
  else if (dep[u] < dep[v])
    ;
  return r;
}
endsnippet

snippet minv
${1:a} = min($1, ${2:b});
endsnippet

snippet maxv
${1:a} = max($1, ${2:b});
endsnippet

snippet ll
#define __STDC_FORMAT_MACROS
#include <inttypes.h>
#include <stdint.h>

#ifndef LLONG_MAX
#define LLONG_MAX 9223372036854775807LL
#endif

typedef int64_t i64;
endsnippet

snippet using
using namespace std;
endsnippet

snippet st
const long N = 100000, V = 2*N;
long allo, fork, suff, len[V], sl[V];
char* pos[V];
map<long, long> to[V];

long new_node(char* p, long l)
{
  pos[allo] = p;
  len[allo] = l;
  sl[allo] = 0;
  to[allo].clear();
  return allo++;
}

void add(char* s)
{
  long size = strlen(s);
  REP(i, size+1) {
    long last = 0, c = s[i]; // may be NUL
    suff++;
    while (suff > 0) {
      long cc = s[i+1-suff]; // may be NUL
      auto it = to[fork].find(cc);
      while (it != to[fork].end() && suff > len[it->second]) {
        fork = it->second;
        suff -= len[fork];
        cc = s[i+1-suff]; // may be NUL
        it = to[fork].find(cc);
      }
      if (it == to[fork].end()) {
        if (c)
          to[fork][cc] = new_node(&s[i+1-suff], size-(i+1-suff));
        sl[last] = fork;
        last = 0;
      } else {
        long u, t = pos[it->second][suff-1]; // may be NUL
        if (c == t) {
          sl[last] = fork;
          break;
        }
        u = new_node(pos[it->second], suff-1);
        if (c)
          to[u][c] = new_node(&s[i], size-i);
        to[u][t] = it->second;
        pos[it->second] += suff-1;
        len[it->second] -= suff-1;
        it->second = u;
        sl[last] = u;
        last = u;
      }
      if (fork)
        fork = sl[fork];
      else
        suff--;
    }
  }
}
endsnippet

snippet gst
const long N = 100000, V = 2*N;
long allo, fork, suff, len[V], sl[V];
char* pos[V];
map<long, long> to[V];

long new_node(char* p, long l)
{
  pos[allo] = p;
  len[allo] = l;
  sl[allo] = 0;
  to[allo].clear();
  return allo++;
}

void add(char* s)
{
  long size = strlen(s);
  REP(i, size+1) {
    long last = 0, c = s[i]; // may be NUL
    suff++;
    while (suff > 0) {
      long cc = s[i+1-suff]; // may be NUL
      auto it = to[fork].find(cc);
      while (it != to[fork].end() && suff > len[it->second] && to[it->second].size()) {
        fork = it->second;
        suff -= len[fork];
        cc = s[i+1-suff]; // may be NUL
        it = to[fork].find(cc);
      }
      if (it == to[fork].end()) {
        if (c)
          to[fork][cc] = new_node(&s[i+1-suff], size-(i+1-suff));
        sl[last] = fork;
        last = 0;
      } else {
        long u, t = pos[it->second][suff-1]; // may be NUL
        if (c == t) {
          sl[last] = fork;
          break;
        }
        if (! t) { // extend leaf of a preceding string
          u = it->second;
          to[u][c] = new_node(&s[i], size-i);
        } else {
          u = new_node(pos[it->second], suff-1);
          if (c)
            to[u][c] = new_node(&s[i], size-i);
          to[u][t] = it->second;
          pos[it->second] += suff-1;
          len[it->second] -= suff-1;
          it->second = u;
        }
        sl[last] = u;
        last = u;
      }
      if (fork)
        fork = sl[fork];
      else
        suff--;
    }
  }
}
endsnippet

snippet suffix
long sa[M], rnk[M], h[M], x[M];

void suffix_array(long n, long m)
{
  fill_n(h, m, 0);
  copy_n(a, n, r);
  REP(i, n) h[r[i]]++;
  FOR(i, 1, m) h[i] += h[i-1];
  ROF(i, 0, n) sa[--h[r[i]]] = i;
  int k = 1;
  for (; ; k <<= 1) {
    iota(x, x+k, n-k);
    int j = k;
    REP(i, n) if (sa[i] >= k) x[j++] = sa[i]-k;
    fill_n(h, m, 0);
    REP(i, n) h[r[x[i]]]++;
    FOR(i, 1, m) h[i] += h[i-1];
    ROF(i, 0, n) sa[--h[r[x[i]]]] = x[i];
    fill_n(h, m, 0);
    m = 1;
    h[sa[0]] = 0;
    FOR(i, 1, n) {
      if (r[sa[i]] != r[sa[i-1]] || max(sa[i], sa[i-1]) >= n-k || r[sa[i]+k] != r[sa[i-1]+k]) m++;
      h[sa[i]] = m-1;
    }
    copy_n(h, n, r);
    if (m == n) break;
  }
  k = 0;
  h[0] = 0;
  REP(i, n)
    if (r[i]) {
      for (int j = sa[r[i]-1]; max(i, j)+k < n && a[i+k] == a[j+k]; k++);
      h[r[i]] = k;
      k && k--;
    }
}
endsnippet

snippet morris
void morrisPratt(int n)
{
  pi[0] = 0;
  for (long j = 0, i = 1; i < n; i++) {
    while (j && a[j] != a[i]) j = pi[j-1];
    if (a[j] == a[i]) j++;
    pi[i] = j;
  }
}
endsnippet

snippet lmcs
int i = 0, j = 1;
while (i < n && j < n) {
  int k = 0;
  while (k < n && a[(i+k)%n] == a[(j+k)%n])
    k++;
  if (a[(i+k)%n] < a[(j+k)%n]) j += k+1;
  else i += k+1;
  if (i == j) j++;
}
endsnippet

snippet prime
long lpf[N], primes[N];

void sieve()
{
  long np = 0;
  for (long i = 2; i < N; i++) {
    if (! lpf[i])
      primes[np++] = lpf[i] = i;
    for (long j = 0; j < np && primes[j] <= lpf[i] && i*primes[j] < N; j++)
      lpf[i*primes[j]] = primes[j];
  }
}
endsnippet

snippet gcd
long gcd(long x, long y)
{
  long z;
  while (y)
    z = x%y, x = y, y = z;
  return x;
}
endsnippet

snippet exgcd
long exgcd(long a, long b, long &x, long &y)
{
    if (! b) return x = 1, y = 0, a;
    long gcd = exgcd(b, a%b, y, x);
    y -= a/b*x;
    return gcd;
}
endsnippet

snippet jacobi "Jacobi symbol"
// n > 0 && n % 2
int jacobi(int m, int n)
{
  int r = 1;
  m = (m % n + n) % n;
  while (m) {
    for (; (m & 1) == 0; m >>= 1)
      if (n % 8 == 3 || n % 8 == 5)
        r = - r;
    swap(m, n);
    if (m % 4 == 3 && n % 4 == 3)
      r = - r;
    m = m % n;
  }
  return n == 1 ? r : 0;
}
endsnippet

snippet vec
struct Vec
{
  double x, y;
  Vec() {}
  Vec(double x, double y) : x(x), y(y) {}
  double cross(Vec a, Vec b) const {
    return (a.x - x) * (b.y - y) - (a.y - y) * (b.x - x);
  }
  Vec operator+(Vec r) const { return Vec(x + r.x, y + r.y); }
  Vec operator*(double r) const { return Vec(x * r, y * r); }
  Vec operator/(double r) const { return Vec(x / r, y / r); }
} $0;
endsnippet

snippet l2l
Vec lineIntersectLine(Line p, Line q)
{
  double s = p.a.cross(q.a, p.b),
    t = p.a.cross(p.b, q.b);
  return (q.a * t + q.b * s) / (s + t);
}
endsnippet

snippet area
double polygonArea(const Vec pt[], int n)
{
  double area = 0;
  Vec o(0, 0);
  for (int i = 0; i < n; i++)
    area += o.cross(pt[i], pt[(i+1)%n]);
  return area / 2;
}
endsnippet

snippet halfp
bool cmp_ang(Line p, Line q)
{
  if (fabs(p.ang - q.ang) > eps) return p.ang < q.ang;
  return q.a.cross(q.b, p.a) > 0;
}

int halfPlane(Line* a, int n, Vec* pt)
{
  sort(a, a+n, cmp_ang);

  int m = 1;
  for (int i = 1; i < n; i++)
    if (fabs(a[i].ang - a[i-1].ang) > eps)
      a[m++] = a[i];

  int bot = 0, top = 1;
  for (int i = 2; i < m; i++) {
    while (bot < top && a[i].a.cross(a[i].b, lineIntersectLine(a[top-1], a[top])) < -eps)
      top--;
    while (bot < top && a[i].a.cross(a[i].b, lineIntersectLine(a[bot], a[bot+1])) < -eps)
      bot++;
    a[++top] = a[i];
  }
  while (bot < top && a[bot].a.cross(a[bot].b, lineIntersectLine(a[top-1], a[top])) < -eps)
    top--;
  while (bot < top && a[top].a.cross(a[top].b, lineIntersectLine(a[bot], a[bot+1])) < -eps)
    bot++;

  if (top - bot < 2) return 0;
  m = 0;
  for (int i = bot; i < top; i++)
    pt[m++] = lineIntersectLine(a[i], a[i+1]);
  pt[m++] = lineIntersectLine(a[top], a[bot]);
  return m;
}
endsnippet

snippet scc
long scc[N], dfn[N], nscc, tick;
vector<long> e[N];

long tarjanScc(long u)
{
  static stack<long> S;
  dfn[u] = tick;
  long low = tick++;
  S.push(u);
  for (vector<long>::iterator i = e[u].begin(); i != e[u].end(); ++i)
    if (dfn[*i] == -1)
      low = min(low, tarjanScc(*i));
    else if (scc[*i] == -1)
      low = min(low, dfn[*i]);
  if (low == dfn[u]) {
    long v;
    do scc[v = S.top()] = nscc, S.pop();
    while (v != u);
    nscc++;
  }
  return low;
}

fill_n(dfn, n, -1);
fill_n(scc, n, -1);
nscc = 0;
for (long i = 0; i < n; i++)
  if (dfn[i] == -1)
    tarjanScc(i);
endsnippet

snippet bridge
long bcc[N], dfn[N], parent[N], nbcc, tick;
struct Edge
{
  Edge *next, *pair;
  long v;
} *e[N], *ee[N], pool[M*2], *pit;

long bridgeConnected(long u, Edge* pre)
{
  static stack<long> S;
  dfn[u] = tick;
  long low = tick++;
  S.push(u);
  for (Edge* i = e[u]; i; i = i->next)
    if (dfn[i->v] == -1) {
      parent[i->v] = u;
      low = min(low, bridgeConnected(i->v, i));
      // if (low[i->v] > dfn[u]) then mark i as bridge
    } else if (i->pair != pre)
      low = min(low, dfn[i->v]);
  if (low == dfn[u]) {
    long v;
    do bcc[v = S.top()] = nbcc, S.pop(), sum[nbcc] += val[v];
    while (v != u);
    nbcc++;
  }
  return low;
}
endsnippet

snippet fi
#define fi first
endsnippet

snippet se
#define se second
endsnippet

snippet ALL
#define ALL(x) (x).begin(), (x).end()
endsnippet

snippet blankinship
long blankinship(long a, long b, long &x, long &y)
{
  for (long u = y = 1, v = x = 0; a; ) {
    long q = b/a;
    swap(x -= q*u, u);
    swap(y -= q*v, v);
    swap(b -= q*a, a);
  }
  return b;
}
endsnippet

snippet mul_mod
u64 mul_mod(u64 a, u64 b, u64 mod)
{ 
  u64 x = a*b, r = x - mod*u64((long double)a*b/mod+0.5);
  return i64(r) < 0 ? r + mod : r;
}

extern inline u64 mul_mod(u64 a, u64 b, u64 m)
{
  u64 r;
  asm("mulq %2\n\tdivq %3" : "=&d"(r), "+a"(a) : "rm"(b), "rm"(m) : "cc");
  return r;
}
endsnippet

snippet inv
long inv(long a, long mod)
{
  long x, y;
  blankinship(a, mod, x, y);
  return x < 0 ? x + mod : x;
}
endsnippet

snippet pow_mod
long pow_mod(long a, long b, long mod)
{
  long r = 1;
  for (; b; b >>= 1) {
    if (b & 1)
      r = r * a % mod;
    a = a * a % mod;
  }
  return r;
}
endsnippet

snippet find
long find(long x)
{
  while (uf[x] >= 0) {
    if (uf[uf[x]] >= 0)
      uf[x] = uf[uf[x]];
    x = uf[x];
  }
  return x;
}
endsnippet

snippet lct
namespace LCT {
extern struct Node null;
struct Node {
  long w, opt;
  Node *c[2], *p;
  void init() {
    w = opt = 0;
    c[0] = c[1] = p = &null;
  }
  void mconcat() {
    opt = max(max(c[0]->opt, w), c[1]->opt);
  }
  void untag() {}
  void setc(long d, Node* x) {
    c[d] = x;
    x->p = this;
  }
  void zag(long d) {
    Node *x = c[d], *p = this->p;
    setc(d, x->c[d^1]);
    mconcat();
    x->setc(d^1, this);
    x->p = p;
    if (p->c[0] == this)
      p->c[0] = x;
    else if (p->c[1] == this)
      p->c[1] = x;
  }
  void splay() {
    while (p->c[0] == this || p->c[1] == this) {
      Node *p = this->p, *g = p->p;
      if (g->c[0] == p || g->c[1] == p) {
        g->untag(); p->untag(); untag();
        if (g->c[0] == p) {
          if (p->c[0] == this) g->zag(0), p->zag(0);
          else p->zag(1), g->zag(0);
        } else {
          if (p->c[0] != this) g->zag(1), p->zag(1);
          else p->zag(0), g->zag(1);
        }
      } else {
        p->untag(); untag();
        p->zag(p->c[0] != this);
      }
    }
    untag();
    mconcat();
  }
  void expose() {
    Node *x = this, *y = &null;
    for (; x != &null; y = x, x = x->p) {
      x->splay();
      x->c[1] = y; // mconcat in last splay
    }
    splay();
  }
  long query(Node* x) {
    expose();
    Node *y = &null, *z = x;
    for (; ; y = x, x = x->p) {
      x->splay();
      if (x->p == &null) break;
      x->c[1] = y;
      x->mconcat();
    }
    long r = max(max(y->opt, x->w), x->c[1]->opt);
    z->splay();
    return r;
  }
} null, nodes[N];
};
endsnippet

snippet lctx
namespace LCT {
extern struct Node null;
struct Node {
  char flip;
  long w, opt;
  Node *c[2], *p;
  void init() {
    flip = w = opt = 0;
    c[0] = c[1] = p = &null;
  }
  void mconcat() {
    opt = max(max(c[0]->opt, w), c[1]->opt);
  }
  void untag() {
    if (! flip) return;
    flip = 0;
    c[0]->flip ^= 1;
    c[1]->flip ^= 1;
    swap(c[0], c[1]);
  }
  void setc(long d, Node* x) {
    c[d] = x;
    x->p = this;
  }
  void zag(long d) {
    Node *x = c[d], *p = this->p;
    setc(d, x->c[d^1]);
    mconcat();
    x->setc(d^1, this);
    x->p = p;
    if (p->c[0] == this)
      p->c[0] = x;
    else if (p->c[1] == this)
      p->c[1] = x;
  }
  void splay() {
    while (p->c[0] == this || p->c[1] == this) {
      Node *p = this->p, *g = p->p;
      if (g->c[0] == p || g->c[1] == p) {
        g->untag(); p->untag(); untag();
        if (g->c[0] == p) {
          if (p->c[0] == this) g->zag(0), p->zag(0);
          else p->zag(1), g->zag(0);
        } else {
          if (p->c[0] != this) g->zag(1), p->zag(1);
          else p->zag(0), g->zag(1);
        }
      } else {
        p->untag(); untag();
        p->zag(p->c[0] != this);
      }
    }
    untag();
    mconcat();
  }
  void expose() {
    Node *x = this, *y = &null;
    for (; x != &null; y = x, x = x->p) {
      x->splay();
      x->c[1] = y; // mconcat in last splay
    }
    splay();
  }
  void evert() {
    expose();
    flip = 1;
  }
  void link(Node* par) {
    evert();
    p = par;
  }
  void cut(Node* par) {
    par->evert();
    expose();
    par->p = &null;
    setc(0, &null);
    mconcat();
  }
  bool same_root(Node *x) {
    expose();
    x->expose();
    return p != &null;
  }
  long query(Node* x) {
    evert();
    x->expose();
    return x->opt;
  }
} null, nodes[N];
};
endsnippet

snippet mincost
long h[V], hsrc, src, sink;
vector<pll> adj[V];
struct Edge { long v, c, w; Edge *next, *dual; } *e[V], pool[M << 1], *allo;

void insert(long u, long v, long c, long w)
{
  allo->v = v; allo->c = c; allo->w = w; allo->next = e[u]; e[u] = allo++;
  allo->v = u; allo->c = 0; allo->w = - w; allo->next = e[v]; e[v] = allo++;
  e[u]->dual = e[v];
  e[v]->dual = e[u];
}

bool relabel()
{
  static deque<long> q;
  q.clear();
  q.push_back(sink);
  fill_n(vis, sink+1, false);
  fill_n(h, sink+1, LONG_MAX);
  h[sink] = 0;
  vis[sink] = true;
  while (q.size()) {
    long v = q.front(), t;
    q.pop_front();
    vis[v] = false;
    for (Edge* it = e[v]; it; it = it->next)
      if (it->dual->c && (t = h[v]-it->w) < h[it->v]) {
        h[it->v] = t;
        if (! vis[it->v]) {
          if (t <= h[q.size() ? q.front() : src])
            q.push_front(it->v);
          else
            q.push_back(it->v);
        }
      }
  }
  REP(u, sink+1)
    for (Edge* it = e[u]; it; it = it->next)
      it->w += h[it->v]-h[u];
  hsrc += h[src];
  return h[src] < LONG_MAX;
}

long augment(long u, long f)
{
  if (u == sink) return f;
  vis[u] = true;
  long old = f;
  for (Edge* it = e[u]; it; it = it->next)
    if (it->c > 0 && ! vis[it->v] && ! it->w) {
      long ff = augment(it->v, min(f, it->c));
      it->c -= ff;
      it->dual->c += ff;
      if (! (f -= ff)) break;
    }
  return old-f;
}

long w;
fill_n(h, sink+1, 0);
hsrc = 0;
while (relabel())
  while (fill_n(vis, sink+1, false), w = augment(src, LONG_MAX))
    cost += w*hsrc;
endsnippet

# vim:ft=snippets:
